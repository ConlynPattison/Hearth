// schema.prisma
generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL_PG")
}

model Realm {
    realmId      Int      @id @default(autoincrement())
    realmName    String   @db.VarChar(16)
    isSearchable Boolean  @default(true)
    createdAt    DateTime @default(now())

    UsersOnRealms               UsersOnRealms[]
    Domain                      Domain[]
    Room                        Room[]
    FactionsOnUsersOnRealms     FactionsOnUsersOnRealms[]
    Faction                     Faction[]
    UsersOnRealmWithPermissions UsersOnRealmWithPermissions[]
}

model User {
    auth0Id     String   @id @unique
    username    String   @db.VarChar(64)
    displayName String   @db.VarChar(32)
    avatarUrl   String   @db.VarChar(128)
    createdAt   DateTime @default(now())
    isDeleted   Boolean  @default(false)

    UsersOnRealms               UsersOnRealms[]
    UsersOnRealmWithPermissions UsersOnRealmWithPermissions[]
    FactionsOnUsersOnRealms     FactionsOnUsersOnRealms[]
}

model Room {
    roomId    Int     @id @default(autoincrement())
    roomName  String  @db.VarChar(32)
    isPrivate Boolean @default(false)

    realmId Int
    realm   Realm @relation(fields: [realmId], references: [realmId])

    RoomPermissions RoomPermissions[]
}

model Faction {
    factionId    Int     @id @default(autoincrement())
    factionName  String  @db.VarChar(16)
    factionColor String  @db.Char(8) // hex 
    isDeleted    Boolean @default(false)

    realmId Int
    realm   Realm @relation(fields: [realmId], references: [realmId])

    FactionsWithPermissions FactionsWithPermissions[]
    FactionsOnUsersOnRealms FactionsOnUsersOnRealms[]

    @@unique([factionName, realmId])
}

model Domain {
    domainId   Int     @id @default(autoincrement())
    domainName String  @db.VarChar(16)
    isPrivate  Boolean @default(false)

    realmId Int
    realm   Realm @relation(fields: [realmId], references: [realmId])

    // Self-referencing relation to define the parent domain
    parentDomain   Domain? @relation("ParentToChildren", fields: [parentDomainId], references: [domainId])
    parentDomainId Int?

    // Inverse relation for child domains
    children Domain[] @relation("ParentToChildren")

    DomainPermissions DomainPermissions[]
}

model Permissions {
    permissionsId        Int     @id @default(autoincrement())
    canAccess            Boolean @default(false)
    canChangePermissions Boolean @default(false)
    canAddMembers        Boolean @default(false)
    canRemoveMembers     Boolean @default(false)

    UsersOnRealmWithPermissions UsersOnRealmWithPermissions[]
    FactionsWithPermissions     FactionsWithPermissions[]
    DomainPermissions           DomainPermissions[]
    RoomPermissions             RoomPermissions[]
}

model DomainPermissions {
    domainPermissionsId Int @unique @default(autoincrement())

    domainId Int
    domain   Domain @relation(fields: [domainId], references: [domainId])

    permissionsId Int
    permissions   Permissions @relation(fields: [permissionsId], references: [permissionsId])

    @@id([domainId, permissionsId])
}

model RoomPermissions {
    roomPermissionsId Int @unique @default(autoincrement())

    roomId Int
    room   Room @relation(fields: [roomId], references: [roomId])

    permissionsId Int
    permissions   Permissions @relation(fields: [permissionsId], references: [permissionsId])

    @@id([roomId, permissionsId])
}

model UsersOnRealms {
    userOnRealmId Int                 @unique @default(autoincrement())
    memberLevel   UsersOnRealmsLevels @default(MEMBER)

    auth0Id String
    user    User   @relation(fields: [auth0Id], references: [auth0Id])

    realmId Int
    realm   Realm @relation(fields: [realmId], references: [realmId], onDelete: Cascade)

    @@id([auth0Id, realmId])
}

model FactionsOnUsersOnRealms {
    factionsOnUsersOnRealmsId Int @unique @default(autoincrement())

    // references user of a unique usersonrealms entry
    auth0Id String
    user    User   @relation(fields: [auth0Id], references: [auth0Id])

    // references realm of a unique usersonrealms entry (same as the auth0Id entry)
    realmId Int
    realm   Realm @relation(fields: [realmId], references: [realmId])

    factionId Int
    faction   Faction @relation(fields: [factionId], references: [factionId])

    @@id([auth0Id, realmId, factionId])
}

enum UsersOnRealmsLevels {
    OWNER
    ADMIN
    MEMBER
}

model UsersOnRealmWithPermissions {
    userWithPermissionsId Int @unique @default(autoincrement())

    // references user of a unique usersonrealms entry
    auth0Id String
    user    User   @relation(fields: [auth0Id], references: [auth0Id])

    // references realm of a unique usersonrealms entry (same as the auth0Id entry)
    realmId Int
    realm   Realm @relation(fields: [realmId], references: [realmId])

    permissionsId Int
    permissions   Permissions @relation(fields: [permissionsId], references: [permissionsId])

    @@id([auth0Id, realmId, permissionsId])
}

model FactionsWithPermissions {
    factionsWithPermissionsId Int @unique @default(autoincrement())

    factionId Int
    faction   Faction @relation(fields: [factionId], references: [factionId])

    permissionsId Int
    permissions   Permissions @relation(fields: [permissionsId], references: [permissionsId])

    @@id([factionId, permissionsId])
}
